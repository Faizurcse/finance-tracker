#------------Firestore Document Structure---------------------
# Users Collection: This collection contains documents where each document represents a user.
# User Document: Each user document has a unique ID (user.uid), which is the UID provided by Firebase Authentication.
# Subcollection (Transactions): Each user document contains a transactions subcollection, which holds transaction documents for that specific user.
# UID Explanation
# UID (User ID): This is a unique identifier for each user, provided by Firebase Authentication when a user signs up or logs in. It ensures that each user has a distinct identity in your database.
# Example Structure
# Here’s a visual representation of the Firestore database structure:


# users (collection)
# |
# |-- user123 (document)
# |   |-- name: "John Doe"
# |   |-- email: "john.doe@example.com"
# |   |-- transactions (subcollection)
# |       |-- transaction1 (document)
# |       |   |-- amount: 100
# |       |   |-- description: "Groceries"
# |       |   |-- date: "2024-07-17"
# |       |
# |       |-- transaction2 (document)
# |           |-- amount: 50
# |           |-- description: "Fuel"
# |           |-- date: "2024-07-18"
# |
# |-- user456 (document)
#     |-- name: "Jane Smith"
#     |-- email: "jane.smith@example.com"
#     |-- transactions (subcollection)
#         |-- transaction1 (document)
#             |-- amount: 75
#             |-- description: "Books"
#             |-- date: "2024-07-19"


# --------------------data()
# The data() method is a built-in function provided by Firestore in the Firebase JavaScript SDK.
#  When you retrieve documents from a Firestore collection, each document snapshot returned 
#  contains several pieces of metadata and the document's data itself. The data() method extracts
#   the data from the document snapshot and returns it as a plain JavaScript object.

###<!-- Ant Design Table Component: -->

<!-- Ant Design Table Component: <Table> is a versatile component provided by Ant Design for rendering tables in React applications.
Columns Configuration: Each object in columns defines a column's title (title), data index (dataIndex), and a unique key (key).
Data Source: dataSource is an array of objects where each object corresponds to a row in the table, with keys matching dataIndex values in columns.
Rendering: Use JSX syntax to render <Table> and pass columns and dataSource as props.
This setup allows you to create flexible and dynamic tables in React applications using Ant Design, integrating seamlessly with your data structure and providing a structured UI for displaying tabular data. -->

###<!-- papaparse(CSV) -->

<!--  The unparse function from the papaparse library is used to convert an array of objects into a CSV-formatted string. Here’s a concise summary:

unparse Function:
Purpose: Converts an array of objects into a CSV string.
Usage: It takes an array of objects where each object represents a row of data, and converts it into a CSV string format.
Parameters: Takes an array of objects as input.
Output: Returns a string formatted as a CSV. -->

###<!-- function exportToCsv() -->
<!-- Step-by-Step Explanation
Convert Transactions to CSV Format:
The function uses a library function unparse to convert an array of transaction objects into a CSV formatted string. The unparse function likely comes from a library such as PapaParse.
The fields option specifies which properties of the transaction objects to include in the CSV: name, type, date, amount, and tag.
Create a Blob:

A Blob object is created to hold the CSV data. The Blob constructor takes an array of data and an options object specifying the MIME type. In this case, the type is text/csv;charset=utf-8;, indicating a CSV file with UTF-8 character encoding.
Create a Downloadable URL:

The URL.createObjectURL method creates a temporary URL for the Blob. This URL can be used to download the data as a file.
Create an Anchor Element:

An a (anchor) element is created programmatically using document.createElement("a").
The href attribute of the anchor is set to the temporary URL created in the previous step.
The download attribute of the anchor is set to the desired filename, in this case, "transactions.csv".
Trigger the Download:

The anchor element is appended to the document.body to make it part of the DOM.
The click method of the anchor element is called programmatically to trigger the download.
Finally, the anchor element is removed from the DOM to clean up. -->

###<!-- BLOB Object -->

<!-- A Blob (Binary Large Object) object represents immutable, raw data. Blobs are typically used for handling files or binary data in web applications. They can represent data in various formats, such as images, audio, video, or text.

Key Features of Blob Objects
Immutable: Once a Blob is created, its data cannot be modified. You can, however, create a new Blob based on the content of another Blob.

Data Type: A Blob can store data in different formats, and you can specify the MIME type of the data when creating a Blob. For example, text/plain for plain text files, image/jpeg for JPEG images, or application/json for JSON data.

Size: Blobs can be used to represent large amounts of data, such as entire files, without having to load the entire data into memory at once. -->